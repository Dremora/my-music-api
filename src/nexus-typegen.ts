/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./context"


declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    model: NexusPrisma<TypeName, 'model'>
    crud: any
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  AlbumFilterInput: { // input type
    query?: string | null; // String
    year?: number | null; // Int
  }
}

export interface NexusGenEnums {
  Format: "APE" | "FLAC" | "MIXED" | "MP3" | "MPC" | "TAK" | "WMA"
  Location: "APPLE_MUSIC" | "FOOBAR2000" | "GOOGLE_MUSIC" | "SPOTIFY"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Album: { // root type
    artist: string; // String!
    comments?: string | null; // String
    id: string; // ID!
    title: string; // String!
    year?: number | null; // Int
  }
  Query: {};
  Source: { // root type
    accurateRip?: string | null; // String
    comments?: string | null; // String
    cueIssues?: string | null; // String
    discs?: number | null; // Int
    download?: string | null; // String
    edition?: string | null; // String
    format?: NexusGenEnums['Format'] | null; // Format
    location: NexusGenEnums['Location']; // Location!
    mbid?: string | null; // String
    tagIssues?: string | null; // String
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Album: { // field return type
    artist: string; // String!
    comments: string | null; // String
    id: string; // ID!
    sources: NexusGenRootTypes['Source'][]; // [Source!]!
    title: string; // String!
    year: number | null; // Int
  }
  Query: { // field return type
    album: NexusGenRootTypes['Album']; // Album!
    albums: NexusGenRootTypes['Album'][]; // [Album!]!
  }
  Source: { // field return type
    accurateRip: string | null; // String
    comments: string | null; // String
    cueIssues: string | null; // String
    discs: number | null; // Int
    download: string | null; // String
    edition: string | null; // String
    format: NexusGenEnums['Format'] | null; // Format
    id: string; // ID!
    location: NexusGenEnums['Location']; // Location!
    mbid: string | null; // String
    tagIssues: string | null; // String
  }
}

export interface NexusGenFieldTypeNames {
  Album: { // field return type name
    artist: 'String'
    comments: 'String'
    id: 'ID'
    sources: 'Source'
    title: 'String'
    year: 'Int'
  }
  Query: { // field return type name
    album: 'Album'
    albums: 'Album'
  }
  Source: { // field return type name
    accurateRip: 'String'
    comments: 'String'
    cueIssues: 'String'
    discs: 'Int'
    download: 'String'
    edition: 'String'
    format: 'Format'
    id: 'ID'
    location: 'Location'
    mbid: 'String'
    tagIssues: 'String'
  }
}

export interface NexusGenArgTypes {
  Query: {
    album: { // args
      id: string; // ID!
    }
    albums: { // args
      filter: NexusGenInputs['AlbumFilterInput']; // AlbumFilterInput!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}